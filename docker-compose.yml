version: '3.8'

services:
  database:
    image: postgres:alpine
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${PASSWORD}
      POSTGRES_DB: ${DATABASE}
    ports:
      - "6000:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "60", "1", "--loglevel", "warning"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  rabbitmq:
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl node_health_check"]
      interval: 5s
      timeout: 5s
      retries: 5

  app:
    build:
      context: .
      dockerfile: ./Dockerfile
    environment:
      APPLICATION_PORT: ${APPLICATION_PORT}
      URL: ${URL}
      DIALECT: ${DIALECT}
      DB_USERNAME: ${DB_USERNAME}
      DATABASE: ${DATABASE}
      PASSWORD: ${PASSWORD}
      HOST: database
      DB_PORT: ${DB_PORT}
      TOKEN_SECRET: ${TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      CLOUDINARY_CLOUD_NAME: ${CLOUDINARY_CLOUD_NAME}
      CLOUDINARY_API_KEY: ${CLOUDINARY_API_KEY}
      CLOUDINARY_API_SECRET: ${CLOUDINARY_API_SECRET}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      RABBITMQ_URL: amqp://rabbitmq:5672
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "${APPLICATION_PORT}:${APPLICATION_PORT}"

  consumer:
    build:
      context: ../notification-service
      dockerfile: ./Dockerfile
    environment:
      RABBITMQ_URL: amqp://rabbitmq:5672
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always

volumes:
  postgres_data:
